{"version":3,"sources":["../../src/worker.ts","../../src/worker/state.ts","../../src/shared/utils.ts","../../src/worker/csrf.ts","../../src/worker/interceptor.ts","../../node_modules/jwt-decode/lib/atob.js","../../node_modules/jwt-decode/lib/base64_url_decode.js","../../node_modules/jwt-decode/lib/index.js","../../src/worker/operations.ts","../../src/worker/postMesage.ts","../../src/worker/index.ts","../../src/providers.ts","../../src/shared/presets.ts","../sw/service-worker.ts"],"sourcesContent":["export * from './worker/index';\n","import { IFullConfig } from '../interfaces/IFullConfig';\nimport { IProvider } from '../interfaces/IProvider';\n\ninterface IState {\n\tcsrf?: string;\n\tconfig?: IFullConfig;\n\tsession?: {\n\t\tprovider: keyof IState['providers'];\n\t\taccessToken: string;\n\t\texpiresAt: number;\n\t\trefreshToken?: string;\n\t\ttokenType: string;\n\t\tuserInfo?: string;\n\t};\n\tproviders: Record<string, IProvider>;\n}\n\nexport const state: IState = {\n\tproviders: {},\n};\n","export function getRandom() {\n\tif ('crypto' in globalThis && 'randomUUID' in globalThis.crypto) {\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\treturn Math.random().toString(36).slice(2);\n}\n","import { state } from './state';\nimport { getRandom } from '../shared/utils';\n\nexport function getCsrfToken() {\n\tif (state.csrf === null) {\n\t\tstate.csrf = getRandom();\n\t}\n\treturn state.csrf;\n}\n\nexport function checkCsrfToken(token: string) {\n\treturn state.csrf === token;\n}\n","import { IConfig } from '../interfaces/IConfig';\nimport { IProvider } from '../interfaces/IProvider';\nimport { AuthError } from '../shared/enums';\nimport { checkCsrfToken } from './csrf';\nimport { state } from './state';\n\nfunction generateResponse(resp: null | Record<string, unknown>, status = 200): Response {\n\treturn new Response(JSON.stringify(resp), {\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tstatus,\n\t});\n}\n\nexport async function refreshToken(): Promise<void> {\n\tconst providerParams = state.config?.providers?.[state.session?.provider as string] as IProvider;\n\tconst providerOptions = (state.config?.config as IConfig)?.[state.session?.provider as string];\n\tif (!providerParams || !providerParams?.tokenUrl || !state.session?.refreshToken) {\n\t\tthrow new Error('No way to refresh the token');\n\t}\n\n\tconst resp = await fetch(providerParams.tokenUrl, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t\tbody: new URLSearchParams({\n\t\t\tclient_id: providerOptions.clientId,\n\t\t\tgrant_type: 'refreshToken',\n\t\t\trefreshToken: state.session.refreshToken,\n\t\t}),\n\t});\n\n\tif (resp.status !== 200) {\n\t\tthrow new Error('Could not refresh token');\n\t}\n\n\tconst response = await resp.json();\n\n\tstate.session = {\n\t\tprovider: state.session.provider,\n\t\taccessToken: response.access_token,\n\t\ttokenType: response.token_type,\n\t\trefreshToken: response.refresh_token,\n\t\texpiresAt: Date.now() + response.expires_in * 1000,\n\t};\n\n\tif (providerParams.userInfoTokenName) {\n\t\tstate.session.userInfo = response[providerParams.userInfoTokenName];\n\t}\n}\n\nexport async function fetchWithCredentials(request: Request): Promise<Response> {\n\tif (!state.session) {\n\t\treturn generateResponse({ error: AuthError.Unauthorized }, 401);\n\t} else if (state.session.expiresAt < Date.now()) {\n\t\ttry {\n\t\t\tawait refreshToken();\n\t\t} catch {\n\t\t\treturn generateResponse({ error: AuthError.Unauthorized }, 401);\n\t\t}\n\t}\n\n\tconst updatedRequest = new Request(request, {\n\t\theaders: {\n\t\t\t...request.headers,\n\t\t\tAuthorization: `${state.session.tokenType} ${state.session.accessToken}`,\n\t\t\t'X-CSRF-Token': undefined,\n\t\t\t'X-Use-Auth': undefined,\n\t\t},\n\t});\n\tconst response = await fetch(updatedRequest);\n\tif (response.status === 401) {\n\t\ttry {\n\t\t\tawait refreshToken();\n\t\t} catch {\n\t\t\treturn generateResponse({ error: AuthError.Unauthorized }, 401);\n\t\t}\n\t}\n\treturn response;\n}\n\nexport async function fetchListener(event: FetchEvent) {\n\tif (event.request.method !== 'GET') {\n\t\tconst csrf = event.request.headers.get('X-CSRF-Token');\n\t\tif (!csrf || !checkCsrfToken(csrf)) {\n\t\t\treturn event.respondWith(generateResponse({ error: AuthError.InvalidCSRF }, 400));\n\t\t}\n\t}\n\n\tif (event.request.headers.get('X-Use-Auth')) {\n\t\treturn event.respondWith(fetchWithCredentials(event.request));\n\t}\n}\n","/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction InvalidCharacterError(message) {\n    this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = \"InvalidCharacterError\";\n\nfunction polyfill(input) {\n    var str = String(input).replace(/=+$/, \"\");\n    if (str.length % 4 == 1) {\n        throw new InvalidCharacterError(\n            \"'atob' failed: The string to be decoded is not correctly encoded.\"\n        );\n    }\n    for (\n        // initialize result and counters\n        var bc = 0, bs, buffer, idx = 0, output = \"\";\n        // get next character\n        (buffer = str.charAt(idx++));\n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer &&\n        ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ?\n        (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n        0\n    ) {\n        // try to find character in table (0-63, not found => -1)\n        buffer = chars.indexOf(buffer);\n    }\n    return output;\n}\n\nexport default (typeof window !== \"undefined\" &&\n    window.atob &&\n    window.atob.bind(window)) ||\npolyfill;","import atob from \"./atob\";\n\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(\n        atob(str).replace(/(.)/g, function(m, p) {\n            var code = p.charCodeAt(0).toString(16).toUpperCase();\n            if (code.length < 2) {\n                code = \"0\" + code;\n            }\n            return \"%\" + code;\n        })\n    );\n}\n\nexport default function(str) {\n    var output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw \"Illegal base64url string!\";\n    }\n\n    try {\n        return b64DecodeUnicode(output);\n    } catch (err) {\n        return atob(output);\n    }\n}","\"use strict\";\n\nimport base64_url_decode from \"./base64_url_decode\";\n\nexport function InvalidTokenError(message) {\n    this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\n\nexport default function(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified\");\n    }\n\n    options = options || {};\n    var pos = options.header === true ? 0 : 1;\n    try {\n        return JSON.parse(base64_url_decode(token.split(\".\")[pos]));\n    } catch (e) {\n        throw new InvalidTokenError(\"Invalid token specified: \" + e.message);\n    }\n}","import jwtDecode from 'jwt-decode';\nimport { state } from './state';\n\nexport function createSession(params: string, localState: string) {\n\t// TODO\n\t// 1. Compare states\n\t// 2. Get the token\n\t// 3. Save the token\n\n\t// if (config.grantType === GrantFlow.Token) {\n\t// \toauth2.accessToken = accessCode;\n\t// \toauth2.tokenType = 'Bearer';\n\t// \toauth2.expiresIn = expiresIn || 3600;\n\t// \treturn generateResponse(null, 204);\n\t// }\n\n\t// const codeRequest = new Request(config.tokenUrl, {\n\t// \tmethod: 'POST',\n\t// \theaders: {\n\t// \t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t// \t},\n\t// \tbody: new URLSearchParams({\n\t// \t\tclient_id: config.clientId,\n\t// \t\tgrant_type: 'authorization_code',\n\t// \t\tcode: accessCode,\n\t// \t}),\n\t// });\n\n\treturn getUserData();\n}\n\nexport async function getUserData() {\n\tif (!state.session) {\n\t\tthrow new Error('No session found');\n\t}\n\n\tconst providerParams = state.config?.providers?.[state.session.provider];\n\tif (state.session.userInfo) {\n\t\tconst decoded = jwtDecode(state.session.userInfo);\n\t\treturn providerParams?.userInfoParser?.(decoded) || decoded;\n\t} else if (providerParams?.userInfoUrl) {\n\t\tconst resp = await fetch(providerParams.userInfoUrl, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `${state.session.tokenType} ${state.session.accessToken}`,\n\t\t\t},\n\t\t});\n\t\tif (resp.status !== 200) {\n\t\t\tthrow new Error('Could not get user info');\n\t\t}\n\t\tconst response = await resp.json();\n\t\treturn providerParams?.userInfoParser?.(response) || response;\n\t}\n\n\tthrow new Error('No way to get user info');\n}\n\nexport function deleteSession() {\n\tstate.session = undefined;\n}\n","import { getCsrfToken } from './csrf';\nimport { createSession, getUserData, deleteSession } from './operations';\n\nconst operations = {\n\tgetCsrfToken,\n\tcreateSession,\n\tgetUserData,\n\tdeleteSession,\n} as const;\n\nexport function messageListener(event: ExtendableMessageEvent) {\n\tif (event.data.type === 'call') {\n\t\tif (event.data.fnName in operations) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst fn = operations[event.data.fnName as keyof typeof operations] as any;\n\t\t\tconst result = fn(...event.data.options);\n\t\t\tevent.ports[0].postMessage({ key: event.data.caller, result });\n\t\t}\n\t}\n}\n","import { IConfig } from '../interfaces/IConfig';\nimport { IProvider } from '../interfaces/IProvider';\nimport { fetchListener } from './interceptor';\nimport { messageListener } from './postMesage';\nimport { state } from './state';\n\nconst config = JSON.parse(decodeURIComponent(new URLSearchParams(location.search).get('config') || '{}')) as IConfig;\n\nexport function initAuthWorker(providers: Record<string, IProvider>): () => void {\n\tstate.config = {\n\t\tconfig,\n\t\tproviders,\n\t};\n\n\tconst scope = globalThis as unknown as ServiceWorkerGlobalScope;\n\n\tstate.providers = providers;\n\n\tscope.addEventListener('fetch', fetchListener);\n\tscope.addEventListener('message', messageListener);\n\n\treturn () => {\n\t\tscope.removeEventListener('fetch', fetchListener);\n\t\tscope.removeEventListener('message', messageListener);\n\t};\n}\n","export * from './shared/presets';\n","import { IProvider } from '../interfaces/IProvider';\nimport { GrantFlow } from './enums';\n\nexport const google: IProvider = {\n\tloginUrl: 'https://accounts.google.com/o/oauth2/v2/auth',\n\tgrantType: GrantFlow.Token,\n\taccessTokenName: 'access_token',\n\tuserInfoUrl: 'https://www.googleapis.com/oauth2/v3/userinfo',\n\tuserInfoTokenName: 'id_token',\n\tuserInfoParser: (data: any) => ({\n\t\tid: data.sub,\n\t\tname: data.name,\n\t\temail: data.email,\n\t\tpicture: data.picture,\n\t}),\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n// @ts-ignore\nimport { initAuthWorker } from 'auth-worker/worker';\nimport { google } from 'auth-worker/providers';\n\naddEventListener('install', () => {\n\t// @ts-ignore\n\tskipWaiting();\n});\n\naddEventListener('activate', (event) => {\n\t// @ts-ignore\n\tevent.waitUntil(clients.claim());\n});\n\ninitAuthWorker({ google });\n"],"mappings":"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","names":["initAuthWorker","InvalidCharacterError","message","this","prototype","Error","name","window","atob","bind","input","str","String","replace","length","bs","buffer","bc","idx","output","charAt","fromCharCode","indexOf","decodeURIComponent","m","p","code","charCodeAt","toString","toUpperCase","err","InvalidTokenError","token","options","pos","header","JSON","parse","base64_url_decode","split","e","google"]}