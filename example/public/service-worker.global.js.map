{"version":3,"sources":["../node_modules/src/worker.ts","../node_modules/src/presets.ts","../node_modules/src/utils.ts","../node_modules/src/index.ts","../sw/service-worker.ts"],"sourcesContent":["import { Error } from './enums';\nimport { GrantFlow } from './index';\nimport { IFullConfig, TFilter } from './interfaces';\nimport { getRandom, getState } from './utils';\n\nfunction generateResponse(resp: null | Record<string, unknown>, status = 200): Response {\n\treturn new Response(JSON.stringify(resp), {\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tstatus,\n\t});\n}\n\n// This code parses the config from the URL and uses it to configure the app.\nconst config = JSON.parse(\n\tdecodeURIComponent(new URLSearchParams(location.search).get('config') || '{}')\n) as IFullConfig;\n\nconst oauth2 = {\n\taccessToken: '',\n\ttokenType: '',\n\texpiresIn: 0,\n\trefreshToken: '',\n\tcsrf: '',\n};\n\n/**\n * This function checks whether the url is the token url of the OAuth2 security scheme.\n * @param url The url to check.\n * @returns True if the url is the token url of the OAuth2 security scheme.\n */\nconst isOauth2TokenURL = (url: string): boolean => config?.tokenUrl === url;\n\n/**\n * Checks if the provided url is an oauth2 protected resource\n * @param {string} url - The url to check\n * @returns {boolean} - True if the url is an oauth2 protected resource, false otherwise\n */\nconst isOauth2ProtectedResourceURL = (url: string): boolean =>\n\t(Object.entries(new URL(url)) as Array<[keyof TFilter, string]>).some(\n\t\t([key, value]) => config.filter?.[key] === value\n\t);\n\n// This function adds an OAuth 2.0 Authorization header to requests to protected resources.\n// The function returns the modified request.\nfunction modifyRequest(request: Request): Request {\n\tif (isOauth2ProtectedResourceURL(request.url) && oauth2.tokenType && oauth2.accessToken) {\n\t\tconst headers = new Headers(request.headers);\n\t\tif (!headers.has('Authorization')) {\n\t\t\theaders.set('Authorization', `${oauth2.tokenType} ${oauth2.accessToken}`);\n\t\t}\n\t\treturn new Request(request, { headers });\n\t}\n\n\treturn request;\n}\n\n/**\n * This code modifies the response from an Oauth2 token request to only return the payload of the response,\n * without the access_token, token_type, expires_in, or refresh_token fields.\n * The purpose of this code is to keep the access token secret.\n */\nasync function modifyResponse(response: Response): Promise<Response> {\n\tif (isOauth2TokenURL(response.url) && response.status === 200) {\n\t\tconst { access_token, token_type, expires_in, refresh_token, ...payload } = await response.json();\n\n\t\toauth2.accessToken = access_token;\n\t\toauth2.tokenType = token_type;\n\t\toauth2.expiresIn = expires_in;\n\t\toauth2.refreshToken = refresh_token;\n\n\t\treturn new Response(JSON.stringify(payload, null, 2), {\n\t\t\theaders: response.headers,\n\t\t\tstatus: response.status,\n\t\t\tstatusText: response.statusText,\n\t\t});\n\t}\n\n\treturn response;\n}\n\nexport async function fetchWithCredentials(input: RequestInfo, init?: RequestInit): Promise<Response> {\n\tconst request = input instanceof Request ? input : new Request(input, init);\n\tconst response = await fetch(modifyRequest(request));\n\treturn modifyResponse(response);\n}\n\n/**\n * Fetches the access token from the token url using the refresh token.\n * @return A promise that resolves to the response from the token url.\n */\nasync function getAccessToken(): Promise<Response | null> {\n\treturn config.tokenUrl\n\t\t? fetchWithCredentials(\n\t\t\t\tnew Request(config.tokenUrl, {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t\t},\n\t\t\t\t\tbody: new URLSearchParams({\n\t\t\t\t\t\tclient_id: config.clientId,\n\t\t\t\t\t\tgrant_type: 'refreshToken',\n\t\t\t\t\t\trefreshToken: oauth2.refreshToken,\n\t\t\t\t\t}),\n\t\t\t\t})\n\t\t  )\n\t\t: null;\n}\n\n/**\n * This function is used to refresh the current access token when it expires.\n * If the current response is an OAuth2 protected resource URL (i.e. a URL that requires an access token to be accessed) and\n * the response status is 401 (unauthorized), then a new access token is retrieved using the refresh token.\n * If the current response is not an OAuth2 protected resource URL or the response status is not 401, then the response is\n * returned without any changes.\n * @param request The current request\n * @param response The current response\n * @returns A promise that resolves to the response\n */\nasync function useRefreshToken(request: Request, response: Response): Promise<Response> {\n\tif (isOauth2ProtectedResourceURL(response.url) && response.status === 401 && oauth2.refreshToken) {\n\t\tawait getAccessToken();\n\t\treturn fetchWithCredentials(request);\n\t}\n\n\treturn response;\n}\n\n// Fetches a request with credentials, refreshing the token if necessary.\n// Returns the response.\nexport async function fetchWithCredentialRefresh(input: RequestInfo, init?: RequestInit): Promise<Response> {\n\tconst request = input instanceof Request ? input : new Request(input, init);\n\tconst response = await fetchWithCredentials(request);\n\treturn await useRefreshToken(request, response);\n}\n\n// This code is used to exchange an access code for an access token\nasync function login(accessCode: string, state: string, expiresIn?: number): Promise<Response> {\n\tif (state !== (await getState())) {\n\t\treturn generateResponse({ error: Error.InvalidState }, 400);\n\t}\n\tif (config.grantType === GrantFlow.Token) {\n\t\toauth2.accessToken = accessCode;\n\t\toauth2.tokenType = 'Bearer';\n\t\toauth2.expiresIn = expiresIn || 3600;\n\t\treturn generateResponse(null, 204);\n\t}\n\n\tconst codeRequest = new Request(config.tokenUrl, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t\tbody: new URLSearchParams({\n\t\t\tclient_id: config.clientId,\n\t\t\tgrant_type: 'authorization_code',\n\t\t\tcode: accessCode,\n\t\t}),\n\t});\n\n\tconst response = await fetch(codeRequest);\n\tconst responseData = await response.json();\n\tconsole.log({ responseData });\n\tif (response.status !== 200) {\n\t\treturn generateResponse(responseData, response.status);\n\t} else {\n\t\toauth2.accessToken = responseData.access_token;\n\t\toauth2.tokenType = responseData.token_type;\n\t\toauth2.expiresIn = responseData.expires_in;\n\t\toauth2.refreshToken = responseData.refresh_token;\n\t\treturn generateResponse(null, 204);\n\t}\n}\n\n// This code logs out a user by clearing the oauth2 variables\nfunction logout() {\n\toauth2.accessToken = '';\n\toauth2.tokenType = '';\n\toauth2.expiresIn = 0;\n\toauth2.refreshToken = '';\n\treturn generateResponse(null, 204);\n}\n\nfunction userData() {\n\tif (!oauth2.accessToken) {\n\t\treturn generateResponse({}, 401);\n\t}\n\treturn generateResponse({}, 200);\n}\n\n/**\n * Generates a random string to use as the CSRF token for the OAuth2 flow.\n *\n * @return {Response} A response object containing the CSRF token.\n */\nfunction csrf(): Response {\n\toauth2.csrf = oauth2.csrf || getRandom();\n\treturn generateResponse({ csrf: oauth2.csrf }, 200);\n}\n\n// This code is used to initialize the authentication worker. It is used by the\n// service worker in the main application to handle login, logout, and other\n// authentication-related tasks. It is exported so that it can be used by the\n// service worker in the project.\nexport function initAuthWorker(): () => void {\n\tconsole.log('Initializing auth worker', config);\n\tconst fetchListener = async (event: FetchEvent) => {\n\t\t// console.log(event.request.url, config);\n\t\tif (event.request.url.endsWith(`${config.urlPrefix}/login`)) {\n\t\t\tconst payload = await event.request.json();\n\t\t\treturn event.respondWith(await login(payload.code, payload.state, payload.expiresIn));\n\t\t} else if (event.request.url.endsWith(`${config.urlPrefix}/logout`)) {\n\t\t\treturn event.respondWith(logout());\n\t\t} else if (event.request.url.endsWith(`${config.urlPrefix}/user-data`)) {\n\t\t\treturn event.respondWith(userData());\n\t\t} else if (event.request.url.endsWith(`${config.urlPrefix}/csrf`)) {\n\t\t\treturn event.respondWith(csrf());\n\t\t} else if (event.request.method !== 'GET') {\n\t\t\tconst payload = await event.request.json();\n\t\t\tif (payload.csrf !== oauth2.csrf) {\n\t\t\t\treturn event.respondWith(generateResponse({ error: Error.InvalidCSRF }, 400));\n\t\t\t}\n\t\t\tevent.respondWith(fetchWithCredentials(event.request));\n\t\t} else {\n\t\t\tevent.respondWith(fetchWithCredentialRefresh(event.request));\n\t\t}\n\t};\n\n\tconst messageListener = async (event: ExtendableMessageEvent) => {\n\t\tif (event.data.type === 'login') {\n\t\t\tconst { code, state, expiresIn } = event.data;\n\t\t\treturn event.ports[0].postMessage(await login(code, state, expiresIn));\n\t\t} else if (event.data.type === 'logout') {\n\t\t\treturn event.ports[0].postMessage(logout());\n\t\t} else if (event.data.type === 'user-data') {\n\t\t\treturn event.ports[0].postMessage(userData());\n\t\t} else if (event.data.type === 'csrf') {\n\t\t\treturn event.ports[0].postMessage(csrf());\n\t\t}\n\t};\n\n\t(addEventListener as ServiceWorkerGlobalScope['addEventListener'])('fetch', fetchListener);\n\t(addEventListener as ServiceWorkerGlobalScope['addEventListener'])('message', messageListener);\n\treturn () => {\n\t\t(removeEventListener as ServiceWorkerGlobalScope['removeEventListener'])('fetch', fetchListener);\n\t\t(removeEventListener as ServiceWorkerGlobalScope['removeEventListener'])('message', messageListener);\n\t};\n}\n","import { GrantFlow, Provider } from './enums';\nimport { IPreset } from './interfaces';\n\nexport const presets: Record<Provider, IPreset> = {\n\t[Provider.Google]: {\n\t\tloginUrl: 'https://accounts.google.com/o/oauth2/v2/auth',\n\t\tgrantType: GrantFlow.Token,\n\t},\n};\n","import { IConfig, IFullConfig } from './interfaces';\nimport { presets } from './presets';\n\nconst STATE_PARAM_NAME = 'auth-worker/state';\nconst TIMEOUT = 10000;\n\nexport function prepareConfig(config: IConfig): IFullConfig {\n\tif ('provider' in config) {\n\t\treturn { ...config, ...(presets[config.provider] || {}) };\n\t} else {\n\t\treturn config;\n\t}\n}\n\nfunction setLocalData(name: string, value: string) {\n\tlocalStorage.setItem(name, value);\n}\n\nfunction getLocalData(name: string): string | null {\n\treturn localStorage.getItem(name);\n}\n\nexport function windowMessageResponder() {\n\tnavigator.serviceWorker.addEventListener('message', (event: MessageEvent) => {\n\t\tif (!event.source) return;\n\n\t\tif (event.data.type === 'set') {\n\t\t\tsetLocalData(event.data.message.name, event.data.message.value);\n\t\t\tevent.source.postMessage({ key: event.data.key });\n\t\t} else if (event.data.type === 'get') {\n\t\t\tconst value = getLocalData(event.data.message.name);\n\t\t\tevent.source.postMessage({ key: event.data.key, value });\n\t\t}\n\t});\n}\n\nfunction workerSendMessage(type: string, message: Record<string, unknown>): Promise<Record<string, unknown>> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst timeout = setTimeout(() => {\n\t\t\treject();\n\t\t}, TIMEOUT);\n\t\tconst key = getRandom();\n\t\tglobalThis.addEventListener('message', (event) => {\n\t\t\tif (event.data.key === key) {\n\t\t\t\tresolve(event.data);\n\t\t\t\tclearTimeout(timeout);\n\t\t\t}\n\t\t});\n\t\tglobalThis.postMessage({ type, key, message }, '*');\n\t});\n}\n\nexport function clientSendMessage(type: string, message: Record<string, unknown>): Promise<Record<string, unknown>> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst timeout = setTimeout(() => {\n\t\t\treject();\n\t\t}, TIMEOUT);\n\t\tconst key = getRandom();\n\t\tglobalThis.navigator.serviceWorker?.addEventListener('message', (event) => {\n\t\t\tif (event.data.key === key) {\n\t\t\t\tresolve(event.data);\n\t\t\t\tclearTimeout(timeout);\n\t\t\t}\n\t\t});\n\t\tglobalThis.navigator.serviceWorker?.controller?.postMessage({ type, key, message });\n\t});\n}\n\nexport async function setData(name: string, value: string): Promise<void> {\n\tawait workerSendMessage('set', { name, value });\n}\n\nexport async function getData(name: string): Promise<string | undefined> {\n\tconst data = await workerSendMessage('set', { name });\n\tif (data) {\n\t\treturn data.value as string;\n\t}\n}\n\nexport function getRandom() {\n\tif ('crypto' in globalThis && 'randomUUID' in globalThis.crypto) {\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\treturn Math.random().toString(36).slice(2);\n}\n\nexport function getLocalState() {\n\tlet state = getLocalData(STATE_PARAM_NAME);\n\tif (!state) {\n\t\tstate = getRandom();\n\t\tsetLocalData(STATE_PARAM_NAME, state);\n\t}\n\treturn state;\n}\n\nexport async function getState() {\n\tlet state = await getData(STATE_PARAM_NAME);\n\tif (!state) {\n\t\tstate = getRandom();\n\t\tawait setData(STATE_PARAM_NAME, state);\n\t}\n\treturn state;\n}\n","import { GrantFlow } from './enums';\nimport { IConfig } from './interfaces';\nimport { clientSendMessage, getLocalState, prepareConfig, windowMessageResponder } from './utils';\n\n/**\n * Registers the authentication service worker\n *\n * @param config - The auth config\n * @param workerPath - The path to the service worker\n * @param scope - The scope of the service worker\n */\nexport function loadAuthWorker(config: IConfig, workerPath = './service-worker.js', scope = '/') {\n\t(navigator as Window['navigator']).serviceWorker.register(\n\t\tworkerPath +\n\t\t\t'?' +\n\t\t\tnew URLSearchParams({\n\t\t\t\tconfig: JSON.stringify(prepareConfig(config)),\n\t\t\t\tv: '1',\n\t\t\t}),\n\t\t{ type: 'module', scope }\n\t);\n}\nexport function getLoginUrl(config: IConfig, scope: string, redirectPath = window.location.origin + '/login') {\n\tconst fullConfig = prepareConfig(config);\n\tif (!fullConfig.loginUrl) {\n\t\tthrow new Error('No login URL provided');\n\t}\n\tconst url = new URL(fullConfig.loginUrl);\n\turl.searchParams.set('client_id', fullConfig.clientId);\n\turl.searchParams.set('response_type', fullConfig.grantType === GrantFlow.Token ? 'token' : 'code');\n\turl.searchParams.set('state', getLocalState());\n\turl.searchParams.set('scope', scope);\n\turl.searchParams.set('redirect_uri', redirectPath);\n\treturn url.toString();\n}\n\nexport function getHashParams(): Record<string, string> {\n\tconst fragmentString = location.hash.substring(1);\n\n\t// Parse query string to see if page request is coming from OAuth 2.0 server.\n\tconst params: Record<string, string> = {};\n\tconst regex = /([^&=]+)=([^&]*)/g;\n\tlet m;\n\twhile ((m = regex.exec(fragmentString))) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\tconst [_, name, value] = m;\n\t\tparams[name] = decodeURIComponent(value);\n\t}\n\n\treturn params;\n}\n\nwindowMessageResponder();\n\nexport async function login(code: string, state: string, expiresIn: number) {\n\tconst data = await clientSendMessage('login', { code, state, expiresIn });\n\tif (data.error) {\n\t\tthrow new Error(data.error as string);\n\t}\n}\n\nexport { IConfig } from './interfaces';\nexport { GrantFlow, Provider } from './enums';\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n// @ts-ignore\nimport { initAuthWorker } from 'auth-worker/worker';\n\naddEventListener('install', () => {\n\t// @ts-ignore\n\tskipWaiting();\n});\n\naddEventListener('activate', (event) => {\n\t// @ts-ignore\n\tevent.waitUntil(clients.claim());\n});\n\ninitAuthWorker();\n"],"mappings":"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","names":["initAuthWorker"]}