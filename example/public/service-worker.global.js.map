{"version":3,"sources":["../node_modules/src/worker.ts","../sw/service-worker.ts"],"sourcesContent":["import { IConfig } from './interfaces';\n\nconst config = JSON.parse(new URLSearchParams(location.search).get('config') || '{}') as IConfig;\n\nconst oauth2 = {\n\taccessToken: '',\n\ttokenType: '',\n\texpiresIn: 0,\n\trefreshToken: '',\n};\n\ntype TFilterKeys = keyof Omit<URL, 'origin' | 'toString' | 'searchParams' | 'toJSON'>;\nconst isOauth2TokenURL = (url: string): boolean => config.tokenUrl === url;\nconst isOauth2ProtectedResourceURL = (url: string): boolean =>\n\t(Object.entries(new URL(url)) as Array<[TFilterKeys, string]>).some(([key, value]) => config.filter?.[key] === value);\n\nfunction modifyRequest(request: Request): Request {\n\tif (isOauth2ProtectedResourceURL(request.url) && oauth2.tokenType && oauth2.accessToken) {\n\t\tconst headers = new Headers(request.headers);\n\t\tif (!headers.has('Authorization')) {\n\t\t\theaders.set('Authorization', `${oauth2.tokenType} ${oauth2.accessToken}`);\n\t\t}\n\t\treturn new Request(request, { headers });\n\t}\n\n\treturn request;\n}\n\nasync function modifyResponse(response: Response): Promise<Response> {\n\tif (isOauth2TokenURL(response.url) && response.status === 200) {\n\t\tconst { access_token, token_type, expires_in, refresh_token, ...payload } = await response.json();\n\n\t\toauth2.accessToken = access_token;\n\t\toauth2.tokenType = token_type;\n\t\toauth2.expiresIn = expires_in;\n\t\toauth2.refreshToken = refresh_token;\n\n\t\treturn new Response(JSON.stringify(payload, null, 2), {\n\t\t\theaders: response.headers,\n\t\t\tstatus: response.status,\n\t\t\tstatusText: response.statusText,\n\t\t});\n\t}\n\n\treturn response;\n}\n\nexport async function fetchWithCredentials(input: RequestInfo, init?: RequestInit): Promise<Response> {\n\tconst request = input instanceof Request ? input : new Request(input, init);\n\tconst response = await fetch(modifyRequest(request));\n\treturn modifyResponse(response);\n}\n\nasync function getAccessToken(): Promise<Response> {\n\treturn fetchWithCredentials(\n\t\tnew Request(config.tokenUrl, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t},\n\t\t\tbody: new URLSearchParams({\n\t\t\t\tclient_id: config.clientId,\n\t\t\t\tgrant_type: 'refreshToken',\n\t\t\t\trefreshToken: oauth2.refreshToken,\n\t\t\t}),\n\t\t})\n\t);\n}\n\nasync function useRefreshToken(request: Request, response: Response): Promise<Response> {\n\tif (isOauth2ProtectedResourceURL(response.url) && response.status === 401 && oauth2.refreshToken) {\n\t\tawait getAccessToken();\n\t\treturn fetchWithCredentials(request);\n\t}\n\n\treturn response;\n}\n\nexport async function fetchWithCredentialRefresh(input: RequestInfo, init?: RequestInit): Promise<Response> {\n\tconst request = input instanceof Request ? input : new Request(input, init);\n\tconst response = await fetchWithCredentials(request);\n\treturn await useRefreshToken(request, response);\n}\n\nexport function initAuthWorker(): () => void {\n\tconst listener = (event: FetchEvent) => {\n\t\tif (event.request.url.endsWith(`${config.urlPrefix}/login`)) {\n\t\t} else if (event.request.url.endsWith(`${config.urlPrefix}/logout`)) {\n\t\t} else if (event.request.url.endsWith(`${config.urlPrefix}/user-data`)) {\n\t\t} else {\n\t\t\tevent.respondWith(fetchWithCredentialRefresh(event.request));\n\t\t}\n\t};\n\n\t(addEventListener as ServiceWorkerGlobalScope['addEventListener'])('fetch', listener);\n\treturn () => (removeEventListener as ServiceWorkerGlobalScope['removeEventListener'])('fetch', listener);\n}\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n// @ts-ignore\nimport { initAuthWorker } from 'auth-worker/worker';\n\naddEventListener('install', () => {\n\t// @ts-ignore\n\tskipWaiting();\n});\n\naddEventListener('activate', (event) => {\n\t// @ts-ignore\n\tevent.waitUntil(clients.claim());\n});\n\ninitAuthWorker();\n"],"mappings":"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","names":["initAuthWorker"]}